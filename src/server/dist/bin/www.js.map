{"version":3,"sources":["../../app/bin/www.js"],"names":["debug","require","console","log","port","normalizePort","process","env","PORT","app","set","server","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address"],"mappings":";;AAIA;;;;AAEA;;;;AADA,IAAIA,QAAQC,QAAQ,OAAR,EAAiB,eAAjB,CAAZ,C,CALA;;;;AAUAC,QAAQC,GAAR,CAAY,UAAZ;AACA;;;;AAIA,IAAIC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAC,cAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA;;;;AAIA,IAAIO,SAAS,wBAAaF,aAAb,CAAb;;AAEA;;;;AAIAE,OAAOC,MAAP,CAAcR,IAAd;AACAO,OAAOE,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAH,OAAOE,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASV,aAAT,CAAuBW,GAAvB,EAA4B;AACxB,QAAIZ,OAAOa,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,QAAIE,MAAMd,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOY,GAAP;AACH;;AAED,QAAIZ,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;AAIA,SAASU,OAAT,CAAiBK,KAAjB,EAAwB;AACpB,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;;AAED,QAAIE,OAAO,OAAOjB,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,IAFd;;AAIA;AACA,YAAQe,MAAMG,IAAd;AACI,aAAK,QAAL;AACIpB,oBAAQiB,KAAR,CAAcE,OAAO,+BAArB;AACAf,oBAAQiB,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACIrB,oBAAQiB,KAAR,CAAcE,OAAO,oBAArB;AACAf,oBAAQiB,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAMJ,KAAN;AAVR;AAYH;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACnB,QAAIS,OAAOb,OAAOc,OAAP,EAAX;AACA,QAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACP,UAAUA,IADH,GAEP,UAAUA,KAAKpB,IAFnB;AAGAJ,UAAM,kBAAkBqB,IAAxB;AACH","file":"www.js","sourcesContent":["/**\n * Module dependencies.\n */\n\nimport app from '../app';\nvar debug = require('debug')('server:server');\nimport {\n    createServer\n} from 'http';\n\nconsole.log(\"starting\");\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '8080');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n    var port = parseInt(val, 10);\n\n    if (isNaN(port)) {\n        // named pipe\n        return val;\n    }\n\n    if (port >= 0) {\n        // port number\n        return port;\n    }\n\n    return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n        throw error;\n    }\n\n    var bind = typeof port === 'string' ?\n        'Pipe ' + port :\n        'Port ' + port;\n\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n        case 'EACCES':\n            console.error(bind + ' requires elevated privileges');\n            process.exit(1);\n            break;\n        case 'EADDRINUSE':\n            console.error(bind + ' is already in use');\n            process.exit(1);\n            break;\n        default:\n            throw error;\n    }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n    var addr = server.address();\n    var bind = typeof addr === 'string' ?\n        'pipe ' + addr :\n        'port ' + addr.port;\n    debug('Listening on ' + bind);\n}"]}